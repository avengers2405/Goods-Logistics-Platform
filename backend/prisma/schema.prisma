// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  email     String
  clerkId   String    @unique
  phone     String
  createdAt DateTime  @default(now())
  credits   Int
  addresses Address[]
  bookings  Booking[]
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  name       String
  latitude   Float
  longitude  Float
  streetName String?
  town       String?
  city       String?
  state      String?
  user       User    @relation(fields: [userId], references: [id])
}

model Driver {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  clerkId         String            @unique
  phone           String
  vehicleId       String
  vehicle         Vehicle?
  rating          Float
  bookings        Booking[]
  liveLocation    LiveLocation?
  locationHistory LocationHistory[]
  adminId         String
  admin           Admin             @relation(fields: [adminId], references: [id])
}

model Admin {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  clerkId   String   @unique
  phone     String
  drivers   Driver[]
}

model Vehicle {
  id            String      @id @default(cuid())
  liscencePlate String      @unique
  type          VehicleType
  driverId      String?     @unique
  driver        Driver?     @relation(fields: [driverId], references: [id])
}

model Booking {
  id              String   @id @default(cuid())
  driverId        String
  userId          String
  pickupLocation  Json
  dropoffLocation Json
  price           Float
  goodsDetails    String?
  status          Status   @default(PENDING)
  createdAt       DateTime @default(now())
  driver          Driver   @relation(fields: [driverId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model LiveLocation {
  driverId  String   @id
  driver    Driver   @relation(fields: [driverId], references: [id])
  latitutde Float
  longitude Float
  updatedAt DateTime
}

model LocationHistory {
  driverId  String
  driver    Driver   @relation(fields: [driverId], references: [id])
  latitutde Float
  longitude Float
  updatedAt DateTime

  @@id([driverId, updatedAt])
}

enum VehicleType {
  SMALL
  MEDIUM
  LARGE
  TRUCK
}

enum Status {
  PENDING
  ONGOING
  COMPLETED
  CANCELLED
}
