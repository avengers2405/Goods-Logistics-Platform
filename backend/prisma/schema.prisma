generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  email     String
  clerkId   String    @unique
  phone     String
  createdAt DateTime  @default(now())
  credits   Int       @default(0)
  addresses Address[]
  bookings  Booking[]
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  name       String
  latitude   Float
  longitude  Float
  streetName String?
  town       String?
  city       String?
  state      String?
  user       User    @relation(fields: [userId], references: [id])
}

model Driver {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  clerkId         String            @unique
  phone           String
  vehicleId       String?           @unique
  rating          Float             @default(5)
  adminId         String?
  bookings        Booking[]
  admin           Admin?             @relation(fields: [adminId], references: [id])
  liveLocation    LiveLocation?
  locationHistory LocationHistory[]
  vehicle         Vehicle?          @relation(fields: [vehicleId], references: [id])
}

model Admin {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  clerkId   String   @unique
  phone     String
  drivers   Driver[]
}

model Vehicle {
  id            String      @id @default(cuid())
  liscencePlate String      @unique
  type          VehicleType
  driver        Driver?
}

model Booking {
  id              String   @id @default(cuid())
  driverId        String
  userId          String
  pickupLocation  Json
  dropoffLocation Json
  price           Float
  goodsDetails    String?
  status          Status   @default(PENDING)
  createdAt       DateTime @default(now())
  driver          Driver   @relation(fields: [driverId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model LiveLocation {
  driverId  String                    @id
  latitutde Float
  longitude Float
  updatedAt DateTime
  geom      Unsupported("geography")?
  driver    Driver                    @relation(fields: [driverId], references: [id])

  @@index([geom], map: "live_location_geom_idx", type: Gist)
}

model LocationHistory {
  driverId  String
  latitutde Float
  longitude Float
  updatedAt DateTime
  driver    Driver   @relation(fields: [driverId], references: [id])

  @@id([driverId, updatedAt])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum VehicleType {
  SMALL
  MEDIUM
  LARGE
  TRUCK
}

enum Status {
  PENDING
  ONGOING
  COMPLETED
  CANCELLED
}
